// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace gachaAPI.Models;

public partial class gachaContext : DbContext
{
    public gachaContext(DbContextOptions<gachaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Achievement> Achievements { get; set; }

    public virtual DbSet<AchievementProgress> AchievementProgresses { get; set; }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<ActivityLinkVoucher> ActivityLinkVouchers { get; set; }

    public virtual DbSet<ActivityType> ActivityTypes { get; set; }

    public virtual DbSet<ExchangeRecord> ExchangeRecords { get; set; }

    public virtual DbSet<UploadRecord> UploadRecords { get; set; }

    public virtual DbSet<UserAchievement> UserAchievements { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Achievement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__achievem__3213E83FF2859681");

            entity.ToTable("achievement");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AchievementType)
                .HasMaxLength(50)
                .HasColumnName("achievementType");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Target).HasColumnName("target");
        });

        modelBuilder.Entity<AchievementProgress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__achievem__3213E83F402B30F6");

            entity.ToTable("achievementProgress");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AchievementId).HasColumnName("achievementID");
            entity.Property(e => e.Progress).HasColumnName("progress");
            entity.Property(e => e.Target).HasColumnName("target");
            entity.Property(e => e.UserId).HasColumnName("userID");

            entity.HasOne(d => d.Achievement).WithMany(p => p.AchievementProgresses)
                .HasForeignKey(d => d.AchievementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__achieveme__achie__0F624AF8");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity__3213E83FECFDDFDE");

            entity.ToTable("activity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActivityEnd)
                .HasColumnType("datetime")
                .HasColumnName("activityEnd");
            entity.Property(e => e.ActivityStart)
                .HasColumnType("datetime")
                .HasColumnName("activityStart");
            entity.Property(e => e.ActivityTypeId).HasColumnName("activityTypeId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Status)
                .HasDefaultValue(true)
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("title");

            entity.HasOne(d => d.ActivityType).WithMany(p => p.Activities)
                .HasForeignKey(d => d.ActivityTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__activity__activi__7F2BE32F");
        });

        modelBuilder.Entity<ActivityLinkVoucher>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity__3213E83F5B6E0F38");

            entity.ToTable("activityLinkVoucher");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activityID");
            entity.Property(e => e.VoucherId).HasColumnName("voucherID");

            entity.HasOne(d => d.Activity).WithMany(p => p.ActivityLinkVouchers)
                .HasForeignKey(d => d.ActivityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__activityL__activ__02084FDA");
        });

        modelBuilder.Entity<ActivityType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity__3213E83F059F40CE");

            entity.ToTable("activityType");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ExchangeRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exchange__3213E83F676B1581");

            entity.ToTable("exchangeRecord");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ExchangeDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("exchangeDate");
            entity.Property(e => e.GachaIdFrom).HasColumnName("gachaIdFrom");
            entity.Property(e => e.GachaIdTo).HasColumnName("gachaIdTo");
            entity.Property(e => e.UserIdFrom).HasColumnName("userIdFrom");
            entity.Property(e => e.UserIdTo).HasColumnName("userIdTo");
        });

        modelBuilder.Entity<UploadRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__uploadRe__3213E83F583C5ED2");

            entity.ToTable("uploadRecord");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BagId).HasColumnName("bagId");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("uploadDate");
        });

        modelBuilder.Entity<UserAchievement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__userAchi__3213E83FD744A5E4");

            entity.ToTable("userAchievement");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AchievedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("achievedAt");
            entity.Property(e => e.AchievementId).HasColumnName("achievementID");
            entity.Property(e => e.UserId).HasColumnName("userID");

            entity.HasOne(d => d.Achievement).WithMany(p => p.UserAchievements)
                .HasForeignKey(d => d.AchievementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__userAchie__achie__0B91BA14");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}